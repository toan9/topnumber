{"version":3,"sources":["TopNumber.js","Display.js","helpers.js","Target.js","App.js","serviceWorker.js","index.js"],"names":["TopNumber","props","state","nextProps","nextState","document","body","style","background","this","highest","game","number","setState","React","Component","fontSize","color","textShadow","position","top","left","transform","Display","random","min","max","r","Math","floor","Target","visibility","cursor","className","fieldStyle","width","bottom","height","App","targets","latestClick","intervals","hitTarget","bind","startGame","endGame","key","ms","push","setInterval","obj","newObj","prop","hasOwnProperty","clone","num","e","target","parseInt","innerText","toFixed","createTarget","prevProps","prevState","forEach","int","clearInterval","buttonStyle","display","onClick","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47b5cf15.chunk.js","sourcesContent":["import React from 'react';\nconst yellow = 'rgb(255, 215, 18)';\n\nexport class TopNumber extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { 'highest': 0 };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (document.body.style.background != yellow && this.state.highest >= 950*1000) {\n      document.body.style.background = yellow;\n    } else if (!this.props.game && nextProps.game) {\n      document.body.style.background = '#266cee';\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.number > this.state.highest) {\n      this.setState({\n        highest: nextProps.number\n      });\n    }\n  }\n\n  render() {\n    return (\n      <h1>\n        Top Number: {this.state.highest}\n      </h1>\n    );\n  }\n}\n\n ","import React from 'react';\n\nconst style = {\n\tfontSize: 110,\n\tcolor:    'white',\n\ttextShadow: '2px 2px 2px #FF0000',\n\tposition: 'absolute',\n\ttop: '40%',\n\tleft: '50%',\n\ttransform: 'translate(-50%, -50%)',\n};\n\nexport const Display = (props) => {\n\treturn (\n\t\t<div style={style}>\n\t\t\t{props.number}\n\t\t</div>\n\t);\n}\n","export let random = (min, max) => {\n\tlet r = Math.random();\n\treturn Math.floor(r * (max - min) + min);\n};\n\nexport let exists = (x) => {\n\tif (x != null) return x;\n}\n\nexport let clone = (obj) => {\n\tlet newObj = {};\n\tfor (let prop in obj) {\n\t\tif (obj.hasOwnProperty(prop)) {\n\t\t\tnewObj[prop] = obj[prop];\n\t\t}\n\t}\n\treturn newObj;\n}","import React from 'react';\nimport { random } from './helpers';\n\nexport class Target extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.number != nextProps.number;\n  }\n\n  render() {\n    let visibility = this.props.number ? 'visible' : 'hidden';\n    let style = {\n      position: 'absolute',\n      left: random(0, 100) + '%',\n      top: random(0, 100) + '%',\n      fontSize: 40,\n      cursor: 'pointer',\n      visibility: visibility\n    };\n\n    return (\n      <span style={style} className=\"target\">\n        {this.props.number}\n      </span>\n    )\n  }\n}\n","import React from 'react';\nimport { TopNumber } from './TopNumber';\nimport { Display } from './Display';\nimport { Target } from './Target';\nimport { random, clone } from './helpers'; \n\nconst fieldStyle = {\n  position: 'absolute',\n  width: 250,\n  bottom: 60,\n  left: 10,\n  height: '60%',\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      game: false,\n      targets: {},\n      latestClick: 0\n    };\n\n    this.intervals = null;\n\n    this.hitTarget = this.hitTarget.bind(this);\n    this.startGame = this.startGame.bind(this);\n    this.endGame = this.endGame.bind(this);\n  }\n\n  createTarget(key, ms) {\n    ms = ms || random(500, 2000);\n    this.intervals.push(setInterval(function(){\n      let targets = clone(this.state.targets);\n      let num = random(1, 1000*1000);\n      targets[key] = targets[key] != 0 ? 0 : num;\n      this.setState({ targets: targets });\n    }.bind(this), ms));\n  }\n\n  hitTarget(e) {\n    if (e.target.className != 'target') return;\n    let num = parseInt(e.target.innerText);\n    for (let target in this.state.targets) {\n      let key = Math.random().toFixed(4);\n      this.createTarget(key);\n    }\n    this.setState({ latestClick: num });\n  }\n\n  startGame() {\n    this.createTarget('first', 1000);\n    this.setState({\n      game: true\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (this.state.latestClick < prevState.latestClick) {\n  this.endGame();\n}\n  }\n  endGame() {\n    this.intervals.forEach((int) => {\n      clearInterval(int);\n    });\n    this.intervals = [];\n    this.setState({\n      game: false,\n      targets: {},\n      latestClick: 0\n    });\n  }\n\n  componentWillMount() {\n    this.intervals = [];\n  }\n\n  render() {\n    let buttonStyle = {\n      display: this.state.game ? 'none' : 'inline-block'\n    };\n    let targets = [];\n    for (let key in this.state.targets) {\n      targets.push(\n        <Target \n          number={this.state.targets[key]} \n          key={key} />\n      );\n    }\n    return (\n      <div>\n        <TopNumber number={this.state.latestClick} game={this.state.game} />\n        <Display number={this.state.latestClick} />\n        <button onClick={this.startGame} style={buttonStyle}>\n          New Game \n        </button>\n        <div style={fieldStyle} onClick={this.hitTarget}>\n          {targets}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}